% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crew_controller.R
\name{crew_controller}
\alias{crew_controller}
\title{Create a controller object from a client and launcher.}
\usage{
crew_controller(client, launcher, crashes_max = 0L, auto_scale = NULL)
}
\arguments{
\item{client}{An \code{R6} client object created by \code{\link[=crew_client]{crew_client()}}.}

\item{launcher}{An \code{R6} launcher object created by one of the
\verb{crew_launcher_*()} functions such as \code{\link[=crew_launcher_local]{crew_launcher_local()}}.}

\item{crashes_max}{A crash is different from an ordinary error.
If a task throws an ordinary error at the R level, then \code{crew}
catches it automatically and returns the error message in the output
data returned when the task is popped or collected. However,
if the worker shuts down while the task is running, then \code{crew}
cannot retrieve the error message, and the task is considered "crashed".
In such cases, the output data for the task returns a status of \code{"crash"}
instead of \code{"error"}.

Sometimes the worker exits unexpectedly because the task causes
an out-of-memory error or an AWS Batch spot instance exits.
In such cases, it is sometimes desirable to retry the task on a
different worker.

\code{crashes_max} is a positive integer, and it sets the maximum number of
allowable consecutive crashes for a given task.
If a task crashes more than \code{crashes_max} times in a row
with a status of \code{"crash"},
then the controller throws an error when it retries the task.

As of \code{crew} version 0.10.2.9005, the controller does not
automatically resubmit crashed tasks. It is the user's responsibility
to pop or collect the task, notice that the \code{status} column of the
output equals \code{"crash"} (\code{code} equals \code{19}) and then resubmit the
task using the same task name. Some packages that use \code{crew},
such as \code{targets}, already resubmit crashed tasks automatically.

\code{crew} and \code{mirai} choose not to automatically resubmit tasks
because in order to do this, the data dependencies of every task
would need to persist in memory in case any task needs a retry.
If thousands of tasks are running simultaneously and each of them
needs a different input dataset, then memory consumption could skyrocket.
So, \code{mirai} relinquishes the dependency memory of
a task as soon as a worker starts running it.
This reduces memory consumption but shifts
responsibility for retries to the user (or packages like \code{targets}).}

\item{auto_scale}{Deprecated. Use the \code{scale} argument of \code{push()},
\code{pop()}, and \code{wait()} instead.}
}
\description{
This function is for developers of \code{crew} launcher plugins.
Users should use a specific controller helper such as
\code{\link[=crew_controller_local]{crew_controller_local()}}.
}
\examples{
if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
client <- crew_client()
launcher <- crew_launcher_local()
controller <- crew_controller(client = client, launcher = launcher)
controller$start()
controller$push(name = "task", command = sqrt(4))
controller$wait()
controller$pop()
controller$terminate()
}
}
\seealso{
Other controller: 
\code{\link{crew_class_controller}}
}
\concept{controller}
