% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crew_client.R
\name{crew_class_client}
\alias{crew_class_client}
\title{\code{R6} client class.}
\description{
\code{R6} class for \code{mirai} clients.
}
\details{
See \code{\link[=crew_client]{crew_client()}}.
}
\examples{
if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
client <- crew_client()
client$start()
client$log()
client$terminate()
}

## ------------------------------------------------
## Method `crew_class_client$new`
## ------------------------------------------------

if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
client <- crew_client()
client$start()
client$log()
client$terminate()
}
}
\seealso{
Other client: 
\code{\link{crew_client}()}
}
\concept{client}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{name}}{See \code{\link[=crew_client]{crew_client()}}.}

\item{\code{workers}}{See \code{\link[=crew_client]{crew_client()}}.}

\item{\code{host}}{See \code{\link[=crew_client]{crew_client()}}.}

\item{\code{port}}{See \code{\link[=crew_client]{crew_client()}}.}

\item{\code{tls}}{See \code{\link[=crew_client]{crew_client()}}.}

\item{\code{seconds_interval}}{See \code{\link[=crew_client]{crew_client()}}.}

\item{\code{seconds_timeout}}{See \code{\link[=crew_client]{crew_client()}}.}

\item{\code{retry_tasks}}{See \code{\link[=crew_client]{crew_client()}}}

\item{\code{log_resources}}{Path to the log file for logging resources.}

\item{\code{throttle}}{Throttle object for logging resources.}

\item{\code{relay}}{Relay object for event-driven programming on a downstream
condition variable.}

\item{\code{started}}{Whether the client is started.}

\item{\code{client}}{Process ID of the local process running the client.}

\item{\code{dispatcher}}{Process ID of the \code{mirai} dispatcher}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-crew_class_client-new}{\code{crew_class_client$new()}}
\item \href{#method-crew_class_client-validate}{\code{crew_class_client$validate()}}
\item \href{#method-crew_class_client-start}{\code{crew_class_client$start()}}
\item \href{#method-crew_class_client-terminate}{\code{crew_class_client$terminate()}}
\item \href{#method-crew_class_client-condition}{\code{crew_class_client$condition()}}
\item \href{#method-crew_class_client-resolved}{\code{crew_class_client$resolved()}}
\item \href{#method-crew_class_client-summary}{\code{crew_class_client$summary()}}
\item \href{#method-crew_class_client-resources}{\code{crew_class_client$resources()}}
\item \href{#method-crew_class_client-log}{\code{crew_class_client$log()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-new"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-new}{}}}
\subsection{Method \code{new()}}{
\code{mirai} client constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$new(
  name = NULL,
  workers = NULL,
  host = NULL,
  port = NULL,
  tls = NULL,
  seconds_interval = NULL,
  seconds_timeout = NULL,
  retry_tasks = NULL,
  log_resources = NULL,
  relay = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{workers}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{host}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{port}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{tls}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{seconds_interval}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{seconds_timeout}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{retry_tasks}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{log_resources}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}

\item{\code{relay}}{Argument passed from \code{\link[=crew_client]{crew_client()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \code{R6} object with the client.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
client <- crew_client()
client$start()
client$log()
client$terminate()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-validate"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-validate}{}}}
\subsection{Method \code{validate()}}{
Validate the client.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$validate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-start"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-start}{}}}
\subsection{Method \code{start()}}{
Start listening for workers on the available sockets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$start()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-terminate"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-terminate}{}}}
\subsection{Method \code{terminate()}}{
Stop the mirai client and disconnect from the
worker websockets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$terminate()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} (invisibly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-condition"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-condition}{}}}
\subsection{Method \code{condition()}}{
Get the \code{nanonext} condition variable which tasks signal
on resolution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$condition()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The \code{nanonext} condition variable which tasks signal
on resolution. The return value is \code{NULL} if the client
is not running.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-resolved"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-resolved}{}}}
\subsection{Method \code{resolved()}}{
Get the true value of the \code{nanonext} condition variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$resolved()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Subtracts a safety offset which was padded on start.
}

\subsection{Returns}{
The value of the \code{nanonext} condition variable.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-summary"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-summary}{}}}
\subsection{Method \code{summary()}}{
Show an informative worker log.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$summary()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{tibble} with information on the workers, or \code{NULL}
if the client is not started. The \code{tibble} has 1 row
per worker and the following columns:
\itemize{
\item \code{worker}: integer index of the worker.
\item \code{online}: \code{TRUE} if the worker is online and connected to the
websocket URL, \code{FALSE} otherwise.
\item \code{instances}: integer, number of instances of \code{mirai} daemons
(\code{crew} workers) that have connected to the websocket URL
during the life cycle of the listener.
\item \code{assigned}: number of tasks assigned to the current websocket URL.
\item \code{complete}: number of tasks completed at the current websocket URL.
\item \code{socket}: websocket URL. \code{crew} changes the token at the end of the
URL path periodically as a safeguard while managing workers.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-resources"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-resources}{}}}
\subsection{Method \code{resources()}}{
Get resource usage of local \code{crew} processes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$resources()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{tibble} with one row per process, including the current
R process ("client") and the \code{mirai} dispatcher. If the dispatcher
is not included in the output, it means the dispatcher process
is not running.
Columns include:
* \code{name}: friendly name of process (\code{"client"} or \code{"dispatcher"})
* \code{pid}: the process ID.
* \code{status}: The process status (from \code{ps::ps_status()}).
* \code{rss}: resident set size (RSS). RS is the total memory held by
a process, including shared libraries which may also be
in use by other processes. RSS is obtained
from \code{ps::ps_memory_info()} and shown in bytes.
* \code{time}: character string time stamp of when the data was
recorded.
Generated by \code{format(Sys.time(), "\%Y-\%m-\%d \%H:\%M:\%S \%Z")}.
Use \code{as.POSIXct()} to convert this value to a date,
e.g. to plot \code{rss} vs \code{time}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-crew_class_client-log"></a>}}
\if{latex}{\out{\hypertarget{method-crew_class_client-log}{}}}
\subsection{Method \code{log()}}{
Write resource consumption from \code{resources()} to
the \code{log_resources} file originally supplied to the client.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{crew_class_client$log(throttle = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{throttle}}{\code{TRUE} to throttle with interval \code{seconds_interval}
seconds to avoid overburdening the system when writing to the log
file. \code{FALSE} otherwise.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
When called from the controller as a side effect,
logging is throttled so it does not happen more
frequently than \code{seconds_interval} seconds.
The only exception is the explicit \code{log()} controller method.

The log file has one row per observation of a process,
including the current
R process ("client") and the \code{mirai} dispatcher. If the dispatcher
is not included in the output, it means the dispatcher process
is not running.
Columns include:
* \code{type}: the type of process (client or dispatcher)
* \code{pid}: the process ID.
* \code{status}: The process status (from \code{ps::ps_status()}).
* \code{rss}: resident set size (RSS). RS is the total memory held by
a process, including shared libraries which may also be
in use by other processes. RSS is obtained
from \code{ps::ps_memory_info()} and shown in bytes.
* \code{elapsed}: number of elapsed seconds since the R process was
started (from \code{proc.time()["elapsed"]}).
}

\subsection{Returns}{
\code{NULL} (invisibly). Writes to the log file if \code{log_resources}
was originally given.
The log file itself is in comma-separated values
(CSV) format which can be easily read by \code{readr::read_csv()}.
If \code{log_resources} is \code{NULL},
then \code{log()} has no effect.
}
}
}
