% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crew_client.R
\name{crew_client}
\alias{crew_client}
\title{Create a client object.}
\usage{
crew_client(
  name = NULL,
  workers = 1L,
  host = NULL,
  port = NULL,
  tls = crew::crew_tls(),
  tls_enable = NULL,
  tls_config = NULL,
  seconds_interval = 0.5,
  seconds_timeout = 5,
  retry_tasks = TRUE,
  log_resources = NULL
)
}
\arguments{
\item{name}{Name of the client object. If \code{NULL}, a name is automatically
generated.}

\item{workers}{Integer, maximum number of parallel workers to run.}

\item{host}{IP address of the \code{mirai} client to send and receive tasks.
If \code{NULL}, the host defaults to the local IP address.}

\item{port}{TCP port to listen for the workers. If \code{NULL},
then an available ephemeral port is automatically chosen.}

\item{tls}{A TLS configuration object from \code{\link[=crew_tls]{crew_tls()}}.}

\item{tls_enable}{Deprecated on 2023-09-15 in version 0.4.1.
Use argument \code{tls} instead.}

\item{tls_config}{Deprecated on 2023-09-15 in version 0.4.1.
Use argument \code{tls} instead.}

\item{seconds_interval}{Number of seconds between
polling intervals waiting for certain internal
synchronous operations to complete,
such as checking \code{mirai::status()}}

\item{seconds_timeout}{Number of seconds until timing
out while waiting for certain synchronous operations to complete,
such as checking \code{mirai::status()}.}

\item{retry_tasks}{\code{TRUE} to automatically retry a task in the event of
an unexpected worker exit. \code{FALSE} to give up on the first exit and
return a \code{mirai} error code (code number 19).
\code{TRUE} (default) is recommended in most situations.
Use \code{FALSE} for debugging purposes, e.g. to confirm that a task
is causing a worker to run out of memory or crash in some other way.}

\item{log_resources}{Optional character string with a file path to a
text file to log memory consumption.
Set \code{log_resources} to \code{NULL} to avoid writing to a log file.
If you supply a path, then
the \code{log()} method will write memory usage statistics to the file,
and most controller methods will do the same with throttling
so resource consumption is recorded throughout the whole lifecycle
of the controller.

The log file is in comma-separated values
(CSV) format which can be easily read by \code{readr::read_csv()}.
The controller automatically deletes the old log file when it starts
(when \code{controller$start()} is called for the first time, but not
subsequent times).

The log file has one row per observation of a process,
including the current
R process ("client") and the \code{mirai} dispatcher. If the dispatcher
is not included in the output, it means the dispatcher process
is not running.
Columns include:
* \code{type}: the type of process (client or dispatcher)
* \code{pid}: the process ID.
* \code{status}: The process status (from \code{ps::ps_status()}).
* \code{rss}: resident set size (RSS). RS is the total memory held by
a process, including shared libraries which may also be
in use by other processes. RSS is obtained
from \code{ps::ps_memory_info()} and shown in bytes.
* \code{elapsed}: number of elapsed seconds since the R process was
started (from \code{proc.time()["elapsed"]}).}
}
\description{
Create an \code{R6} wrapper object to manage the \code{mirai} client.
}
\examples{
if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
client <- crew_client()
client$start()
client$summary()
client$terminate()
}
}
\seealso{
Other client: 
\code{\link{crew_class_client}}
}
\concept{client}
