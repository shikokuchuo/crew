% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crew_controller_local.R
\name{crew_controller_local}
\alias{crew_controller_local}
\title{Create a controller with a local process launcher.}
\usage{
crew_controller_local(
  name = NULL,
  workers = 1L,
  host = "127.0.0.1",
  port = NULL,
  tls = crew::crew_tls(),
  tls_enable = NULL,
  tls_config = NULL,
  seconds_interval = 1,
  seconds_timeout = 60,
  seconds_launch = 30,
  seconds_idle = 300,
  seconds_wall = Inf,
  seconds_exit = NULL,
  retry_tasks = NULL,
  tasks_max = Inf,
  tasks_timers = 0L,
  reset_globals = TRUE,
  reset_packages = FALSE,
  reset_options = FALSE,
  garbage_collection = FALSE,
  crashes_error = NULL,
  launch_max = NULL,
  r_arguments = c("--no-save", "--no-restore"),
  options_metrics = crew::crew_options_metrics(),
  options_local = crew::crew_options_local(),
  crashes_max = 0L,
  local_log_directory = NULL,
  local_log_join = NULL
)
}
\arguments{
\item{name}{Deprecated on 2025-01-14 (\code{crew} version 0.10.2.9002).}

\item{workers}{Deprecated on 2025-01-13 (\code{crew} version 0.10.2.9002).}

\item{host}{IP address of the \code{mirai} client to send and receive tasks.
If \code{NULL}, the host defaults to the local IP address.}

\item{port}{TCP port to listen for the workers. If \code{NULL},
then an available ephemeral port is automatically chosen.
Controllers running simultaneously on the same computer
(as in a controller group) must not share the same TCP port.}

\item{tls}{A TLS configuration object from \code{\link[=crew_tls]{crew_tls()}}.}

\item{tls_enable}{Deprecated on 2023-09-15 in version 0.4.1.
Use argument \code{tls} instead.}

\item{tls_config}{Deprecated on 2023-09-15 in version 0.4.1.
Use argument \code{tls} instead.}

\item{seconds_interval}{Number of seconds between
polling intervals waiting for certain internal
synchronous operations to complete,
such as checking \code{mirai::status()}}

\item{seconds_timeout}{Number of seconds until timing
out while waiting for certain synchronous operations to complete,
such as checking \code{mirai::status()}.}

\item{seconds_launch}{Seconds of startup time to allow.
A worker is unconditionally assumed to be alive
from the moment of its launch until \code{seconds_launch} seconds later.
After \code{seconds_launch} seconds, the worker is only
considered alive if it is actively connected to its assign websocket.}

\item{seconds_idle}{Maximum number of seconds that a worker can idle
since the completion of the last task. If exceeded, the worker exits.
But the timer does not launch until \code{tasks_timers} tasks
have completed.
See the \code{idletime} argument of \code{mirai::daemon()}. \code{crew} does not
excel with perfectly transient workers because it does not micromanage
the assignment of tasks to workers, so please allow enough idle
time for a new worker to be delegated a new task.}

\item{seconds_wall}{Soft wall time in seconds.
The timer does not launch until \code{tasks_timers} tasks
have completed.
See the \code{walltime} argument of \code{mirai::daemon()}.}

\item{seconds_exit}{Deprecated on 2023-09-21 in version 0.5.0.9002.
No longer necessary.}

\item{retry_tasks}{Deprecated on 2025-01-13 (\code{crew} version 0.10.2.9002).}

\item{tasks_max}{Maximum number of tasks that a worker will do before
exiting. See the \code{maxtasks} argument of \code{mirai::daemon()}.
\code{crew} does not
excel with perfectly transient workers because it does not micromanage
the assignment of tasks to workers, it is recommended to set
\code{tasks_max} to a value greater than 1.}

\item{tasks_timers}{Number of tasks to do before activating
the timers for \code{seconds_idle} and \code{seconds_wall}.
See the \code{timerstart} argument of \code{mirai::daemon()}.}

\item{reset_globals}{\code{TRUE} to reset global environment
variables between tasks, \code{FALSE} to leave them alone.}

\item{reset_packages}{\code{TRUE} to unload any packages loaded during
a task (runs between each task), \code{FALSE} to leave packages alone.}

\item{reset_options}{\code{TRUE} to reset global options to their original
state between each task, \code{FALSE} otherwise. It is recommended to
only set \code{reset_options = TRUE} if \code{reset_packages} is also \code{TRUE}
because packages sometimes rely on options they set at loading time.}

\item{garbage_collection}{\code{TRUE} to run garbage collection between
tasks, \code{FALSE} to skip.}

\item{crashes_error}{Deprecated on 2025-01-13 (\code{crew} version 0.10.2.9002).}

\item{launch_max}{Deprecated on 2024-11-04 (\code{crew} version 0.10.2.9002).
Use \code{crashes_error} instead.}

\item{r_arguments}{Optional character vector of command line arguments
to pass to \code{Rscript} (non-Windows) or \code{Rscript.exe} (Windows)
when starting a worker. Example:
\code{r_arguments = c("--vanilla", "--max-connections=32")}.}

\item{options_metrics}{Either \code{NULL} to opt out of resource metric logging
for workers, or an object from \code{\link[=crew_options_metrics]{crew_options_metrics()}} to enable
and configure resource metric logging for workers.
For resource logging to run,
the \code{autometric} R package version 0.1.0 or higher
must be installed.}

\item{options_local}{An object generated by \code{\link[=crew_options_local]{crew_options_local()}}
with options specific to the local controller.}

\item{crashes_max}{A crash is different from an ordinary error.
If a task throws an ordinary error at the R level, then \code{crew}
catches it automatically and returns the error message in the output
data returned when the task is popped or collected. However,
if the worker shuts down while the task is running, then \code{crew}
cannot retrieve the error message, and the task is considered "crashed".
In such cases, the output data for the task returns a status of \code{"crash"}
instead of \code{"error"}.

Sometimes the worker exits unexpectedly because the task causes
an out-of-memory error or an AWS Batch spot instance exits.
In such cases, it is sometimes desirable to retry the task on a
different worker.

\code{crashes_max} is a non-negative integer, and it sets the maximum number of
allowable consecutive crashes for a given task.
If a task crashes more than \code{crashes_max} times in a row
with a status of \code{"crash"},
then the controller throws an error when it retries the task.

As of \code{crew} version 0.10.2.9005, the controller does not
automatically resubmit crashed tasks. It is the user's responsibility
to pop or collect the task, notice that the \code{status} column of the
output equals \code{"crash"} (\code{code} equals \code{19}) and then resubmit the
task using the same task name. Some packages that use \code{crew},
such as \code{targets}, already resubmit crashed tasks automatically.

\code{crew} and \code{mirai} choose not to automatically resubmit tasks
because in order to do this, the data dependencies of every task
would need to persist in memory in case any task needs a retry.
If thousands of tasks are running simultaneously and each of them
needs a different input dataset, then memory consumption could skyrocket.
So, \code{mirai} relinquishes the dependency memory of
a task as soon as a worker starts running it.
This reduces memory consumption but shifts
responsibility for retries to the user (or packages like \code{targets}).}

\item{local_log_directory}{Deprecated on 2024-10-08. Use
\code{options_local} instead.}

\item{local_log_join}{Deprecated on 2024-10-08. Use
\code{options_local} instead.}
}
\description{
Create an \code{R6} object to submit tasks and
launch workers on local processes.
}
\examples{
if (identical(Sys.getenv("CREW_EXAMPLES"), "true")) {
controller <- crew_controller_local()
controller$start()
controller$push(name = "task", command = sqrt(4))
controller$wait()
controller$pop()
controller$terminate()
}
}
\seealso{
Other plugin_local: 
\code{\link{crew_class_launcher_local}},
\code{\link{crew_launcher_local}()}
}
\concept{plugin_local}
